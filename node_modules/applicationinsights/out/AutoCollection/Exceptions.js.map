{"version":3,"file":"Exceptions.js","sourceRoot":"","sources":["../../AutoCollection/Exceptions.ts"],"names":[],"mappings":";AAQA;IAWI,+BAAY,MAAuB;QAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;QACnG,CAAC;QAED,qBAAqB,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAfD,sBAAkB,wDAA+B;aAAjD,cAA8D,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;;;OAAA;IAC3F,sBAAkB,yDAAgC;aAAlD,cAA+D,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;;;OAAA;IAgBtF,6CAAa,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,sCAAM,GAAb,UAAc,SAAkB;QAAhC,iBA8BC;QA7BG,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACjC,IAAI,MAAM,GAAG,UAAC,OAAgB,EAAE,KAAY;oBACxC,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;oBAClD,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,IAAI,sDAAsD,GAAG,KAAK,CAAC;wBACnE,MAAM,sDAAsD,CAAC,CAAC,8CAA8C;oBAChH,CAAC;gBACL,CAAC,CAAC;gBACF,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACxD,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAEzD,OAAO,CAAC,EAAE,CAAC,qBAAqB,CAAC,+BAA+B,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBACjG,OAAO,CAAC,EAAE,CAAC,qBAAqB,CAAC,gCAAgC,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;YACtG,CAAC;QAEL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBAChC,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,+BAA+B,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBAC7G,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,gCAAgC,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBAC9G,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;gBAC1C,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;gBAC1C,OAAO,IAAI,CAAC,wBAAwB,CAAC;gBACrC,OAAO,IAAI,CAAC,wBAAwB,CAAC;YACzC,CAAC;QACL,CAAC;IACL,CAAC;IAEM,uCAAO,GAAd;QACI,qBAAqB,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAChC,CAAC;IA1Da,8BAAQ,GAA0B,IAAI,CAAC;IA2DzD,4BAAC;CAAA,AA7DD,IA6DC;AAID,iBAAS,qBAAqB,CAAC","sourcesContent":["import http = require(\"http\");\n\nimport Contracts = require(\"../Declarations/Contracts\");\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport Sender = require(\"../Library/Sender\");\nimport Queue = require(\"../Library/Channel\");\nimport Util = require(\"../Library/Util\");\n\nclass AutoCollectExceptions {\n\n    public static INSTANCE: AutoCollectExceptions = null;\n    public static get UNCAUGHT_EXCEPTION_HANDLER_NAME(): string { return \"uncaughtException\"; }\n    public static get UNHANDLED_REJECTION_HANDLER_NAME(): string { return \"unhandledRejection\"; }\n\n    private _exceptionListenerHandle: (reThrow: boolean, error: Error) => void;\n    private _rejectionListenerHandle: (reThrow: boolean, error: Error) => void;\n    private _client: TelemetryClient;\n    private _isInitialized: boolean;\n\n    constructor(client: TelemetryClient) {\n        if (!!AutoCollectExceptions.INSTANCE) {\n            throw new Error(\"Exception tracking should be configured from the applicationInsights object\");\n        }\n\n        AutoCollectExceptions.INSTANCE = this;\n        this._client = client;\n    }\n\n    public isInitialized() {\n        return this._isInitialized;\n    }\n\n    public enable(isEnabled: boolean) {\n        if (isEnabled) {\n            this._isInitialized = true;\n            var self = this;\n            if (!this._exceptionListenerHandle) {\n                var handle = (reThrow: boolean, error: Error) => {\n                    this._client.trackException({ exception: error });\n                    this._client.flush({ isAppCrashing: true });\n                    if (reThrow) {\n                        var THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION = error;\n                        throw THIS_IS_APPLICATION_INSIGHTS_RETHROWING_YOUR_EXCEPTION; // Error originated somewhere else in your app\n                    }\n                };\n                this._exceptionListenerHandle = handle.bind(this, true);\n                this._rejectionListenerHandle = handle.bind(this, false);\n\n                process.on(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\n                process.on(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\n            }\n\n        } else {\n            if (this._exceptionListenerHandle) {\n                process.removeListener(AutoCollectExceptions.UNCAUGHT_EXCEPTION_HANDLER_NAME, this._exceptionListenerHandle);\n                process.removeListener(AutoCollectExceptions.UNHANDLED_REJECTION_HANDLER_NAME, this._rejectionListenerHandle);\n                this._exceptionListenerHandle = undefined;\n                this._rejectionListenerHandle = undefined;\n                delete this._exceptionListenerHandle;\n                delete this._rejectionListenerHandle;\n            }\n        }\n    }\n\n    public dispose() {\n        AutoCollectExceptions.INSTANCE = null;\n        this.enable(false);\n        this._isInitialized = false;\n    }\n}\n\n\n\nexport = AutoCollectExceptions;\n"]}